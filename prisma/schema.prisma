generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

enum TimerStatus {
  RUNNING
  STOPPED
  PAUSED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

model User {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  role                Role                @default(USER)
  projectsAssignments ProjectAssignment[] // Links to assigned projects
  timeLogs            TimeLog[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  projects            Project[]           @relation("User")
  ownedProjects       ProjectManagement[]
  tasks               TaskAssignment[]
}

model Project {
  id             String              @id @default(uuid())
  name           String
  description    String?
  estimatedHours Float
  timeStatus     Float               @default(0.00)
  timeFrameStart DateTime            @default(now())
  timeFrameEnd   DateTime?
  isArchived     Boolean             @default(false)
  color          String              @default("#12499B")
  isPinned       Boolean             @default(false)
  pinnedAt       DateTime?           @default(now())
  status         ProjectStatus       @default(OPEN)
  completedAt    DateTime?
  createdBy      String // ID of the user who created the project
  creator        User                @relation("User", fields: [createdBy], references: [id])
  managers       ProjectManagement[]
  assignments    ProjectAssignment[]
  timeLogs       TimeLog[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String?
  tasks          Task[]
}

model ProjectAssignment {
  id         String   @id @default(uuid())
  userId     String
  projectId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
}

model TimeLog {
  id          String      @id @default(uuid())
  userId      String
  projectId   String?
  taskId      String?
  startTime   DateTime
  endTime     DateTime?
  pauseTime   DateTime?
  pausedSec   Int         @default(0)
  durationSec Int         @default(0)
  description String
  status      TimerStatus @default(RUNNING)
  user        User        @relation(fields: [userId], references: [id])
  project     Project?    @relation(fields: [projectId], references: [id])
  task        Task?       @relation(fields: [taskId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Task {
  id             String           @id @default(uuid())
  title          String
  description    String?
  projectId      String
  estimatedHours Float
  timeStatus     Float            @default(0.00)
  status         TaskStatus       @default(OPEN)
  project        Project          @relation(fields: [projectId], references: [id])
  assignees      TaskAssignment[]
  timeLogs       TimeLog[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model TaskAssignment {
  id         String     @id @default(uuid())
  taskId     String
  userId     String
  status     TaskStatus @default(OPEN)
  task       Task       @relation(fields: [taskId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  assignedAt DateTime   @default(now())
}

model ProjectManagement {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  role      Role     @default(USER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
